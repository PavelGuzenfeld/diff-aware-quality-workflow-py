name: Pull Request Feedback

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write  # Required to post comments on the PR

jobs:
  quality-checks:
    name: Diff-Aware Quality Checks
    runs-on: ubuntu-latest

    steps:
      - name: Check out full repository history
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run diff-aware linting with flake8
        id: flake8-diff
        run: |
          # Compare the current branch with the PR's base branch.
          # Pipe the diff with zero context lines (-U0) to flake8 --diff.
          git diff -U0 origin/${{ github.base_ref }} -- '*.py' | flake8 --diff
        continue-on-error: true

      - name: Run affected tests and collect coverage
        run: |
          pytest --testmon --cov --cov-report=xml --verbose

      - name: Generate diff coverage report
        id: diff-cover
        run: |
          # Generate the report and capture output
          echo "DIFF_COVER_REPORT<<EOF" >> $GITHUB_ENV
          diff-cover coverage.xml --compare-branch=origin/${{ github.base_ref }} --markdown-report=diff-cover.md || true
          cat diff-cover.md >> $GITHUB_ENV 2>/dev/null || diff-cover coverage.xml --compare-branch=origin/${{ github.base_ref }} >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        continue-on-error: true

      - name: Post coverage report as a PR comment
        uses: actions/github-script@v7
        if: always()
        with:
          script: |
            const output = process.env.DIFF_COVER_REPORT || 'No coverage data available';
            
            // Create comment body
            let commentBody = '## üìä Diff Coverage Report\n\n';
            
            if (output.includes('No coverage data available')) {
              commentBody += '‚ö†Ô∏è No coverage data was generated for this PR.\n';
            } else {
              commentBody += output;
            }
            
            commentBody += '\n\n---\n*This report shows coverage only for lines changed in this PR.*';
            
            // Post comment
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            });

      - name: Check flake8 status
        if: steps.flake8-diff.outcome == 'failure'
        run: |
          echo "‚ùå Flake8 found linting issues in your changes"
          exit 1